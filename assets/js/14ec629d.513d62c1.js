"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8780],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3946:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Transformers"},s=void 0,u={unversionedId:"main-components/transformers",id:"main-components/transformers",isDocsHomePage:!1,title:"Transformers",description:"* Definition & Principles",source:"@site/docs/main-components/transformers.md",sourceDirName:"main-components",slug:"/main-components/transformers",permalink:"/docs/next/main-components/transformers",editUrl:"https://github.com/apiato/documentation/tree/master/docs/main-components/transformers.md",tags:[],version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629,formattedLastUpdatedAt:"8/1/2022",frontMatter:{title:"Transformers"},sidebar:"docs",previous:{title:"Views",permalink:"/docs/next/main-components/views"},next:{title:"Exceptions",permalink:"/docs/next/main-components/exceptions"}},p=[{value:"Definition &amp; Principles",id:"definition-principles",children:[]},{value:"Rules",id:"rules",children:[]},{value:"Folder Structure",id:"folder-structure",children:[]},{value:"Code Samples",id:"code-samples",children:[]},{value:"Relationships (include)",id:"relationships-include",children:[]},{value:"Transformer Available helper functions:",id:"transformer-available-helper-functions",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#definition-principles"},"Definition & Principles")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rules"},"Rules")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#relationships-include"},"Relationships (include)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#from-front-end"},"From Front-end")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#from-back-end"},"From Back-end")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#transformer-available-helper-functions"},"Transformer Available helper functions:"))),(0,i.kt)("h3",{id:"definition-principles"},"Definition & Principles"),(0,i.kt)("p",null,"Read ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Mahmoudz/Porto#Transformers"},(0,i.kt)("strong",{parentName:"a"},"Porto SAP Documentation (#Transformers)")),"."),(0,i.kt)("h3",{id:"rules"},"Rules"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All API responses MUST be formatted via a Transformer.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Every Transformer SHOULD extend from ",(0,i.kt)("inlineCode",{parentName:"p"},"App\\Ship\\Parents\\Transformers\\Transformer"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each Transformer MUST have a ",(0,i.kt)("inlineCode",{parentName:"p"},"transform()")," function."))),(0,i.kt)("h3",{id:"folder-structure"},"Folder Structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - UI\n                    - API\n                        - Transformers\n                            - UserTransformer.php\n                            - ...\n")),(0,i.kt)("h3",{id:"code-samples"},"Code Samples"),(0,i.kt)("h4",{id:"reward-transformer-with-country-relation"},"Reward Transformer with Country relation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class ItemTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => $item->getResourceKey(),\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n            'readable_created_at' => $item->created_at->diffForHumans(),\n            'readable_updated_at' => $item->updated_at->diffForHumans(),\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $item->id,\n            'deleted_at' => $item->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n")),(0,i.kt)("h4",{id:"usage-from-controller-single-item"},"Usage from Controller (Single Item)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$user = $this->getUser();\n\n$this->transform($user, UserTransformer::class);\n\n// more options are available\n")),(0,i.kt)("h3",{id:"relationships-include"},"Relationships (include)"),(0,i.kt)("p",null,"Loading relationships in Transformer (calling other Transformers):"),(0,i.kt)("p",null,"This can be done in 2 ways:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"By the User, he can specify what relations to return in response.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"By the Developer, define what relations to include at run time."))),(0,i.kt)("h4",{id:"from-front-end"},"From Front-end"),(0,i.kt)("p",null,"You can request data with their relationships directly from the API call using ",(0,i.kt)("inlineCode",{parentName:"p"},"include=tags,user")," but first the Transformer need to have the ",(0,i.kt)("inlineCode",{parentName:"p"},"availableIncludes")," defined with their functions like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        // use collection with `multi` relationship\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        // use `item` with single relationship\n        return $this->item($account->user, new UserTransformer());\n    }\n}\n")),(0,i.kt)("p",null,"Now to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tags")," with the response when Accounts are requested pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"?include=tags")," parameter with the ","[GET]"," request."),(0,i.kt)("p",null,"To get Tags with User use the comma separator: ",(0,i.kt)("inlineCode",{parentName:"p"},"?include=tags,user"),"."),(0,i.kt)("h4",{id:"from-back-end"},"From Back-end"),(0,i.kt)("p",null,"From the controller you can dynamically set the ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultInclude")," using (",(0,i.kt)("inlineCode",{parentName:"p"},"setDefaultIncludes"),") anytime you want."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"return $this->transform($rewards, ProductsTransformer::class)->setDefaultIncludes(['tags']);\n")),(0,i.kt)("p",null,"You need to have ",(0,i.kt)("inlineCode",{parentName:"p"},"includeTags")," function defined on the transformer. Look at the full examples above."),(0,i.kt)("p",null,"If you want to include a relation with every response from this transformer you can define the relation directly in the transformer on (",(0,i.kt)("inlineCode",{parentName:"p"},"$defaultIncludes"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"protected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n")),(0,i.kt)("p",null,"You need to have ",(0,i.kt)("inlineCode",{parentName:"p"},"includeUser")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"includeTags")," functions defined on the transformer. Look at the full examples above."),(0,i.kt)("h2",{id:"transformer-available-helper-functions"},"Transformer Available helper functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"user()"),": returns current authenticated user object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ifAdmin($adminResponse, $clientResponse)"),": merges normal client response with the admin extra or modified results, when current authenticated user is Admin. Look at the full examples above.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"nullableItem($model->something, new SomethingTransformer())"),": it is a shorthand for "))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$model->something ? $this->item($model->something, new SomethingTransformer()) : $this->primitive(null)\n")),(0,i.kt)("p",null,"For more information about the Transformers read ",(0,i.kt)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"this"),"."))}m.isMDXComponent=!0}}]);