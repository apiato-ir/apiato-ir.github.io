"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3344],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3447:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={title:"API Versioning"},p=void 0,s={unversionedId:"core-features/api-versioning",id:"version-11.x/core-features/api-versioning",isDocsHomePage:!1,title:"API Versioning",description:"- How it works",source:"@site/versioned_docs/version-11.x/core-features/api-versioning.md",sourceDirName:"core-features",slug:"/core-features/api-versioning",permalink:"/docs/core-features/api-versioning",editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/core-features/api-versioning.md",tags:[],version:"11.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629,formattedLastUpdatedAt:"8/1/2022",frontMatter:{title:"API Versioning"},sidebar:"version-11.x/docs",previous:{title:"Pagination",permalink:"/docs/core-features/pagination"},next:{title:"Validation",permalink:"/docs/core-features/validation"}},u=[{value:"How it works",id:"how-it-works",children:[]},{value:"Version the API in header instead of URL",id:"version-the-api-in-header-instead-of-url",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-it-works"},"How it works")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#version-the-api-in-header-instead-of-url"},"Versioning API in header instead of URL"))),(0,o.kt)("p",null,"Since Laravel does not support API versioning, Apiato provide a very easy way to implement versioning for your API."),(0,o.kt)("h3",{id:"how-it-works"},"How it works"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Create:")),(0,o.kt)("p",null,"When creating a new API endpoint, specify the version number in the route file name following this naming format ",(0,o.kt)("inlineCode",{parentName:"p"},"{endpoint-name}.{version-number}.{documentation-name}.php"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MakeOrder.v1.public.php")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MakeOrder.v2.public.php")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ListOrders.v1.private.php"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use:")),(0,o.kt)("p",null,"Automatically the endpoint inside that route file will be accessible by adding the version number to the URL."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"http://api.apiato.test/v1/register")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"http://api.apiato.test/v1/orders")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"http://api.apiato.test/v2/stores/123"))),(0,o.kt)("h2",{id:"version-the-api-in-header-instead-of-url"},"Version the API in header instead of URL"),(0,o.kt)("p",null,"First remove the URL version prefix:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Edit ",(0,o.kt)("inlineCode",{parentName:"li"},"app/Ship/Configs/apiato.php"),", set prefix to ",(0,o.kt)("inlineCode",{parentName:"li"},"'enable_version_prefix' => 'false',"),"."),(0,o.kt)("li",{parentName:"ol"},"Implement the Header versioning anyway you prefer. (this is not implemented in Apiato yet. ",(0,o.kt)("em",{parentName:"li"},"Consider a contribution"),").")))}d.isMDXComponent=!0}}]);